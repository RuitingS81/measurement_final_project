---
title: "Measurement_Final_Project"
author: "Ruiting Shen, Zhuoqing Qiu"
format: pdf
editor_options: 
  chunk_output_type: console
---

```{r}
#| output: false
#| warning: false
setwd("~/Desktop/Measurement/measurement_final_project/")
library(tidyverse)
library(mirt)
library(FactoMineR)
library(factoextra)
library(psych)
library(glca)
```


# Initial data processing 
```{r}
d <- read_csv("data/genpsych_russell_2024_gemma.csv")
codebook <- read_csv("data/codebook_gemma-2_big-five.csv")
codebook <- codebook |> 
  mutate(item = 1:nrow(codebook)) |> 
  dplyr::select(item,item_content)

d_resp <- d |>
  dplyr::select(id, item, resp) |>
  pivot_wider(names_from = item, values_from = resp) |> 
  arrange(desc(-id))

item_cols <- names(d_resp)[-1]
item_order <- order(as.integer(str_extract(item_cols, "\\d+")))
item_cols_sorted <- item_cols[item_order]


########Those are the two datasets we will use later###########
d_resp <- d_resp |>
  dplyr::select(id, all_of(item_cols_sorted))

d_demo <- d |>
  dplyr::select(id, starts_with("cov_")) |>
  distinct() |> 
  arrange(desc(-id))
###############################################################
write_csv(d_demo,"data/d_demo.csv")


```
#PART 1: Introduction

We begin with a descriptive overview of the dataset — reporting sample size and demographic breakdowns— and illustrate these patterns with histograms.
```{r}
# d_demo |> map(unique)

age_hist <- d_demo |> 
  ggplot(aes(x = cov_age))+
  geom_histogram(binwidth = 2, fill = "#7765E3", color = "white") +
  theme_minimal() +
  labs(x = "Age", y = "Count")


english_dist <- d_demo |>
    ggplot(aes(x = .data[["cov_english"]])) +
    geom_bar(fill = "#7765E3") +
    theme_minimal() +
    labs(
      x = NULL,
      y = NULL
    )


race_dist <- d_demo |>
    ggplot(aes(x = .data[["cov_race"]])) +
    geom_bar(fill = "#7765E3") +
    theme_minimal() +
    labs(
      x = NULL,
      y = NULL
    )+
  theme(axis.text.x = element_text(angle = 40, hjust = 1, size = 6))


gender_dist <-d_demo |>
    ggplot(aes(x = .data[["cov_gender"]])) +
    geom_bar(fill = "#7765E3") +
    theme_minimal() +
    labs(
      x = NULL,
      y = NULL
    )+
  theme(axis.text.x = element_text(angle = 40, hjust = 1, size = 6))


ggsave("plots/age_histogram.png", age_hist)
ggsave("plots/englishspeaking_distribution.png", english_dist)
ggsave("plots/race_distribution.png", race_dist)
ggsave("plots/gender_distribution.png", gender_dist)
```


# PART 2: Working with “item responses”

Next, we will perform an exploratory factor analysis and fit a generalized partial credit IRT model (GPCM) to the response data (d_resp).

```{r}
length(unique(d_resp$id))
nrow(d_resp)
```

```{r}
d_resp_fa <- d_resp |> 
  select(-id) |>
  mutate(across(everything(), as.numeric)) |>
  na.omit()

fa_large <- fa(d_resp_fa, rotate='promax', nfactors=25)

fa_eigenvalues <- data.frame(
  Factor = seq_along(fa_large$e.values),
  Eigenvalue = fa_large$e.values
) |>
  mutate(Cumulative_Variance = cumsum(Eigenvalue) / sum(Eigenvalue) * 100)

efa_elbow_plot <- ggplot(fa_eigenvalues, aes(x = Factor, y = Eigenvalue)) +
  geom_point() +
  geom_line(color="salmon2") +
  geom_hline(yintercept = 1, linetype = "dashed", color = "firebrick") +
  theme_minimal() +
  labs(x = "Factor Number", y = "Eigenvalue")

######## From the plot we picked a factor number =6 #########
fa_final <- fa(d_resp_fa, rotate='promax', nfactors=6)
 ############################################################

fa_loadings <- as.data.frame(unclass(fa_final$loadings)) |>
  tibble::rownames_to_column(var="item") |>
  select(-item)

fa_loadings_long <- fa_loadings |>
  rownames_to_column("item") |>
  pivot_longer(cols=-item ,names_to = "Factor", values_to = "Loading") |>
  mutate(item=as.numeric(item)) |>
  left_join(codebook,by="item")


fa_long_plot_fun <- function(factor_number, threshold, color) { 
  factor_name <- paste0("MR", factor_number)
  
  tmp <- fa_loadings_long |>
    filter(Factor == factor_name, abs(Loading) >= threshold) |>
    #####WRAP TEXT SO IT WILL LOOK NICER####
    mutate(item_content = str_wrap(item_content, width = 40))
  
  ggplot(tmp, aes(x = Loading, y = fct_reorder(item_content, Loading))) +
    geom_point(color = color, alpha = 0.7) +
    labs(
      title = paste0("Item Loadings on Factor ", factor_number),
      x = NULL,
      y = NULL
    ) +
    theme(
      axis.text.y = element_text(size = 3, face = "bold", family = "Arial")  
    )+
    theme_minimal()
}

fa1 <- fa_long_plot_fun (1, threshold = 0.13, color = "#7765E3") 
fa2 <-fa_long_plot_fun (2, threshold = 0.12, color = "#7765E3")
fa3 <-fa_long_plot_fun (3, threshold = 0.15, color = "#7765E3")
fa4 <-fa_long_plot_fun (4, threshold = 0.07, color = "#7765E3")
fa5 <-fa_long_plot_fun (5, threshold = 0.08, color = "#7765E3")
fa6 <-fa_long_plot_fun (6, threshold = 0.09, color = "#7765E3")

ggsave("plots/efa_elbow_plot.png",efa_elbow_plot)
ggsave("plots/factor1_loading_plot.png", fa1)
ggsave("plots/factor2_loading_plot.png", fa2)
ggsave("plots/factor3_loading_plot.png", fa3)
ggsave("plots/factor4_loading_plot.png", fa4)
ggsave("plots/factor5_loading_plot.png", fa5)
ggsave("plots/factor6_loading_plot.png", fa6)
combined_plot <- (fa1 | fa2 | fa3) / (fa4 | fa5 | fa6)
ggsave("plots/all_factor_loading_plots.png", 
       combined_plot, 
       width = 11, height = 8.5, units = "in", dpi = 300)
```


# PART 3: Clustering
In addition, we fit a latent class analysis (LCA) model to the response data (d_resp) to uncover distinct subgroups of respondents.

```{r}
d_lca <- d_resp |> 
  select(-id) |> 
  mutate(across(everything(), ~as.factor(.)))

f <- item(starts.with = "items") ~ 1
set.seed(88)
glc_m1 <- glca(f, data=d_lca, nclass=3, verbose=F)
glc_m2 <- glca(f, data=d_lca, nclass=4, verbose=F)
glc_m3 <- glca(f, data=d_lca, nclass=5, verbose=F)
glc_m4 <- glca(f, data=d_lca, nclass=6, verbose=F)
glc_m5 <- glca(f, data=d_lca, nclass=7, verbose=F)
glc_m6 <- glca(f, data=d_lca, nclass=8, verbose=F)
glc_m7 <- glca(f, data=d_lca, nclass=9, verbose=F)

gofglca(glc_m1,glc_m2,glc_m3, glc_m4, glc_m5, glc_m6, glc_m7, test='boot')

#######Based on the goodness‐of‐fit statistics, we selected model5—which specifies seven latent classes—as our final solution########

plot(glc_m5)
fit <- summary(glc_m5)

lca_prob_1 <- read_csv("data/lca_prob_1.csv")
lca_prob_2 <- read_csv("data/lca_prob_2.csv")
lca_prob_3 <- read_csv("data/lca_prob_3.csv")

lca_prob_all <- bind_rows(lca_prob_1,lca_prob_2,lca_prob_3)
lca_prob_all_clean <- lca_prob_all |>
  mutate(
    Item = str_extract(Item, "\\d+"),            
    Class = str_extract(Class, "\\d+"),           
    Category = str_extract(Category, "\\d+")     
  ) |> 
  mutate(
    Item = as.integer(Item),
    Class = as.integer(Class),
    Category = as.integer(Category)
  )

lca_prob_all_clean <- lca_prob_all_clean |>
  arrange(Item) |>
  mutate(Item_group = ceiling(Item / 4))

####Now, create one plot per group#####
plots <- lca_prob_all_clean |>
  group_split(Item_group) |>
  map(~{
    ggplot(.x, aes(x = factor(Class), 
                   y = Probability, 
                   fill = factor(Category))) +
      geom_bar(stat = "identity", position = "dodge") +
      facet_wrap(~ paste0("Item ", Item), scales = "free_y") +
      scale_fill_brewer(palette = "Set2", name = "Response Category") +
      labs(
        x = "Class", y = "Probability",
      ) +
      theme_minimal() +
      theme(
        axis.text.x = element_text(size = 8),
        strip.text = element_text(size = 10, face = "bold")
      )
  })

walk2(plots, 1:7, ~ ggsave(paste0("plot_group_", .y, ".png"), .x, width = 10, height = 6))

```

Descriptions of all seven classes
Class 1. Moderate Prosocials
Members of this class tend to choose “4” on most items—particularly those probing helping behaviors, kindness, and perspective‑taking (e.g., Items 1, 3, 4, 5, 10). They endorse prosocial and empathetic values consistently, suggesting thoughtful, socially engaged attitudes.

Class 2. Strong Prosocials
This group exhibits very high probabilities of selecting “5” on a broad range of items. They display enthusiastic endorsement with statements about kindness, empathy, and cooperation.

Class 3. Low Prosocials
Respondents in this group are most likely to pick “1” or “2,” especially on empathy‑related items (e.g., “I am empathetic…,” “I find it easy to compromise…”). Their pattern reflects minimal alignment with prosocial and empathetic traits — potentially skeptical, disengaged, or less socially oriented.

Class 4. Ambivalent Responders
Individuals in this class gravitate toward the middle of the scale or slightly below (“2–3”). Their responses suggest uncertainty or ambivalence about the statements, possibly due to uncertainty, ambivalence, or social detachment.

Class 5. Active Non‑endorsers
Members consistently choose “1–2” across nearly all items. This pattern indicates active disengagement or resistance to social‑emotional values; they may not identify with the content or could be responding non‑seriously.

Class 6. Context‑Sensitive Responders
This class provides item‑by‑item judgments — selecting higher ratings for clear, concrete empathy items, but defaulting to mid‑scale values for abstract moral statements (e.g., fairness items from 20 onward).

Class 7. Extreme Prosocials
Respondents in this class almost uniformly select “5,” especially on early items (1–10) and others like 24 and 27. 


```{r}
# which(rowSums(is.na(d_lca)) == ncol(d_lca))
posterior <- data.frame(glc_m5$posterior)
class <- data.frame(class = max.col(posterior))
d_demo_clean <- d_demo[!apply(d_lca, 1, function(x) all(is.na(x))), ]

demo_by_class <- bind_cols(d_demo_clean,class) |> 
  mutate(class = as.factor(class)) |> 
  mutate(across(c(cov_english, cov_hispanic, cov_race, cov_gender), as.factor))


##MAKE PLOTS NOW###
class_colors <- c(
  "1" = "#99DDC8",
  "2" = "#6564DB",
  "3" = "#FFA0FD",
  "4" = "#F9DC5C",
  "5" = "#67597A",
  "6" = "#E29578",
  "7" = "#F26430"
)


demo_by_class |> 
  ggplot(aes(x = cov_age, fill = class)) +
  geom_density(alpha = 0.8) +  
  scale_fill_manual(values = class_colors) +
  labs( x = "Age", y = "Density") +
  theme_minimal()


class_gender_plot <- ggplot(demo_by_class, aes(x = cov_gender, fill = class)) +
  geom_bar(position = "dodge") +
  scale_fill_manual(values = class_colors) +
  labs(x = NULL, y = NULL)  +
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 30,hjust = 1, size=8) )


class_race_plot <- ggplot(demo_by_class, aes(x = cov_race, fill = class)) +
  geom_bar(position = "dodge") +
  scale_fill_manual(values = class_colors) +
  labs(x = NULL, y = NULL) +
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 30,hjust = 1, size=8) )


race_gender_plot <- (class_gender_plot ) / (class_race_plot)
ggsave("plots/race_gender_plot.png", 
       race_gender_plot, 
       width = 11, height = 8.5, units = "in", dpi = 300)

```


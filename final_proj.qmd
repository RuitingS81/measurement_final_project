---
title: "Measurement_Final_Project"
author: "Ruiting Shen, Zhuoqing Qiu"
format: pdf
editor_options: 
  chunk_output_type: console
---

```{r}
#| output: false
#| warning: false
setwd("~/Desktop/Measurement/measurement_final_project/")
library(tidyverse)
library(mirt)
library(FactoMineR)
library(factoextra)
library(psych)
library(glca)
```


# Initial data processing 
```{r}
d <- read_csv("data/genpsych_russell_2024_gemma.csv")
codebook <- read_csv("data/codebook_gemma-2_big-five.csv")
codebook <- codebook |> 
  mutate(item = 1:nrow(codebook)) |> 
  dplyr::select(item,item_content)

d_resp <- d |>
  dplyr::select(id, item, resp) |>
  pivot_wider(names_from = item, values_from = resp) |> 
  arrange(desc(-id))

item_cols <- names(d_resp)[-1]
item_order <- order(as.integer(str_extract(item_cols, "\\d+")))
item_cols_sorted <- item_cols[item_order]


########Those are the two datasets we will use later###########
d_resp <- d_resp |>
  dplyr::select(id, all_of(item_cols_sorted))

d_demo <- d |>
  dplyr::select(id, starts_with("cov_")) |>
  distinct() |> 
  arrange(desc(-id))
###############################################################
write_csv(d_demo,"data/d_demo.csv")


```
#PART 1: Introduction

Here we can do some basic descriptions of the dataset, like how many respondents, their demographics distributions.. make some histograms
```{r}
# d_demo |> map(unique)

age_hist <- d_demo |> 
  ggplot(aes(x = cov_age))+
  geom_histogram(binwidth = 2, fill = "#7765E3", color = "white") +
  theme_minimal() +
  labs(x = "Age", y = "Count")


english_dist <- d_demo |>
    ggplot(aes(x = .data[["cov_english"]])) +
    geom_bar(fill = "#7765E3") +
    theme_minimal() +
    labs(
      x = NULL,
      y = NULL
    )


race_dist <- d_demo |>
    ggplot(aes(x = .data[["cov_race"]])) +
    geom_bar(fill = "#7765E3") +
    theme_minimal() +
    labs(
      x = NULL,
      y = NULL
    )+
  theme(axis.text.x = element_text(angle = 40, hjust = 1, size = 6))


gender_dist <-d_demo |>
    ggplot(aes(x = .data[["cov_gender"]])) +
    geom_bar(fill = "#7765E3") +
    theme_minimal() +
    labs(
      x = NULL,
      y = NULL
    )+
  theme(axis.text.x = element_text(angle = 40, hjust = 1, size = 6))


ggsave("plots/age_histogram.png", age_hist)
ggsave("plots/englishspeaking_distribution.png", english_dist)
ggsave("plots/race_distribution.png", race_dist)
ggsave("plots/gender_distribution.png", gender_dist)
```


# PART 2: Working with “item responses”

Here we will don a FA and fit an IRT (use GPCM) to those response data (d_resp)

```{r}
d_resp_fa <- d_resp |> 
  select(-id) |>
  mutate(across(everything(), as.numeric)) |>
  na.omit()

fa_large <- fa(d_resp_fa, rotate='promax', nfactors=25)

fa_eigenvalues <- data.frame(
  Factor = seq_along(fa_large$e.values),
  Eigenvalue = fa_large$e.values
) |>
  mutate(Cumulative_Variance = cumsum(Eigenvalue) / sum(Eigenvalue) * 100)

efa_elbow_plot <- ggplot(fa_eigenvalues, aes(x = Factor, y = Eigenvalue)) +
  geom_point() +
  geom_line(color="salmon2") +
  geom_hline(yintercept = 1, linetype = "dashed", color = "firebrick") +
  theme_minimal() +
  labs(x = "Factor Number", y = "Eigenvalue")

######## From the plot we picked a factor number =6 #########
fa_final <- fa(d_resp_fa, rotate='promax', nfactors=6)
 ############################################################

fa_loadings <- as.data.frame(unclass(fa_final$loadings)) |>
  tibble::rownames_to_column(var="item") |>
  select(-item)

fa_loadings_long <- fa_loadings |>
  rownames_to_column("item") |>
  pivot_longer(cols=-item ,names_to = "Factor", values_to = "Loading") |>
  mutate(item=as.numeric(item)) |>
  left_join(codebook,by="item")


fa_long_plot_fun <- function(factor_number, threshold, color) { 
  factor_name <- paste0("MR", factor_number)
  
  tmp <- fa_loadings_long |>
    filter(Factor == factor_name, abs(Loading) >= threshold) |>
    #####WRAP TEXT SO IT WILL LOOK NICER####
    mutate(item_content = str_wrap(item_content, width = 40))
  
  ggplot(tmp, aes(x = Loading, y = fct_reorder(item_content, Loading))) +
    geom_point(color = color, alpha = 0.7) +
    labs(
      title = paste0("Item Loadings on Factor ", factor_number),
      x = NULL,
      y = NULL
    ) +
    theme(
      axis.text.y = element_text(size = 3)  
    )+
    theme_minimal()
}

fa1 <- fa_long_plot_fun (1, threshold = 0.13, color = "#7765E3") 
fa2 <-fa_long_plot_fun (2, threshold = 0.12, color = "#7765E3")
fa3 <-fa_long_plot_fun (3, threshold = 0.15, color = "#7765E3")
fa4 <-fa_long_plot_fun (4, threshold = 0.07, color = "#7765E3")
fa5 <-fa_long_plot_fun (5, threshold = 0.08, color = "#7765E3")
fa6 <-fa_long_plot_fun (6, threshold = 0.09, color = "#7765E3")

ggsave("plots/efa_elbow_plot.png",efa_elbow_plot)
ggsave("plots/factor1_loading_plot.png", fa1)
ggsave("plots/factor2_loading_plot.png", fa2)
ggsave("plots/factor3_loading_plot.png", fa3)
ggsave("plots/factor4_loading_plot.png", fa4)

```


# PART 3: Clustering
Fit LCA to resp data 

```{r}
d_lca <- d_resp |> 
  select(-id) |> 
  mutate(across(everything(), ~as.factor(.)))

f <- item(starts.with = "items") ~ 1
set.seed(88)
glc_m1 <- glca(f, data=d_lca, nclass=3, verbose=F)
glc_m2 <- glca(f, data=d_lca, nclass=4, verbose=F)
glc_m3 <- glca(f, data=d_lca, nclass=5, verbose=F)
glc_m4 <- glca(f, data=d_lca, nclass=6, verbose=F)
glc_m5 <- glca(f, data=d_lca, nclass=7, verbose=F)
glc_m6 <- glca(f, data=d_lca, nclass=8, verbose=F)
glc_m7 <- glca(f, data=d_lca, nclass=9, verbose=F)

gofglca(glc_m1,glc_m2,glc_m3, glc_m4, glc_m5, glc_m6, glc_m7, test='boot')

#######Based on the goodness of fit table, i would choose model 5 (nclass = 7)as our final mode########

plot(glc_m5)
summary(glc_m5)
```

Descriptions of all seven classes
Class1: Tends to select Y=4 across most items, especially those about helping others, kindness, and perspective-taking (e.g., Items 1, 3, 4, 5, 10). People in this class appears to genuinely endorse prosocial and empathetic values, but with moderation. They seem thoughtful and socially inclined without being extreme.

Class2: High probability of Y=5 on many items,this group strongly identifies with prosocial ideals and expresses enthusiastic endorsement of kindness, empathy, and cooperation.

Class3: High probabilities of Y=1/Y=2, especially on Items 11–17 (e.g., “I am empathetic…”, “I find it easy to compromise…”). This class expresses minimal alignment with prosocial/empathetic traits — potentially skeptical, disengaged, or less socially oriented.

Class4: They often hover in the middle or slightly negative range, possibly due to uncertainty, ambivalence, or social detachment.

Class5: Very high Y=1–2 on almost all items. This group appears actively disengaged or resistant to social-emotional values. They may not identify with the items or could be non-serious responders.

Class6: Shows context-dependent endorsement. For example, empathetic items get more Y=4s, while abstract moral statements (e.g., fairness, Item 20+) get more mid-scale. This group considers each item carefully and gives nuanced responses — agreeing where it resonates, holding back where uncertain.

Class7: Very high Y=5 on nearly every item (especially Items 1–10, 24, 27). Very high Y=5 on nearly every item (especially Items 1–10, 24, 27).

```{r}
# which(rowSums(is.na(d_lca)) == ncol(d_lca))
posterior <- data.frame(glc_m5$posterior)
class <- data.frame(class = max.col(posterior))
d_demo_clean <- d_demo[!apply(d_lca, 1, function(x) all(is.na(x))), ]

demo_by_class <- bind_cols(d_demo_clean,class) |> 
  mutate(class = as.factor(class)) |> 
  mutate(across(c(cov_english, cov_hispanic, cov_race, cov_gender), as.factor))


##MAKE PLOTS NOW###
class_colors <- c(
  "1" = "#99DDC8",
  "2" = "#6564DB",
  "3" = "#FFA0FD",
  "4" = "#F9DC5C",
  "5" = "#67597A",
  "6" = "#E29578",
  "7" = "#F26430"
)


demo_by_class |> 
  ggplot(aes(x = cov_age, fill = class)) +
  geom_density(alpha = 0.8) +  
  scale_fill_manual(values = class_colors) +
  labs(title = "Age Density by Latent Class", x = "Age", y = "Density") +
  theme_minimal()


ggplot(demo_by_class, aes(x = cov_gender, fill = class)) +
  geom_bar(position = "dodge") +
  scale_fill_manual(values = class_colors) +
  labs(x = NULL, y = NULL)  +
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 30,hjust = 1, size=6) )


ggplot(demo_by_class, aes(x = cov_race, fill = class)) +
  geom_bar(position = "dodge") +
  scale_fill_manual(values = class_colors) +
  labs(x = NULL, y = NULL) +
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 30,hjust = 1, size=5) )

```

